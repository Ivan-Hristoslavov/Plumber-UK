const bcrypt = require('bcrypt');
const { createClient } = require('@supabase/supabase-js');

async function testAdminLogin() {
  console.log('üîê –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ Admin Login API...\n');

  // Credentials –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ
  const testEmail = 'hristoslavov.ivanov@gmail.com';
  const testPassword = 'plamen-admin-2024';

  console.log('üìã Test Credentials:');
  console.log('   Email:', testEmail);
  console.log('   Password:', testPassword);
  console.log('');

  try {
    // 1. –ü—ä—Ä–≤–æ –ø—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–º–∞ admin –ø—Ä–æ—Ñ–∏–ª –≤ –±–∞–∑–∞—Ç–∞
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ admin –ø—Ä–æ—Ñ–∏–ª –≤ –±–∞–∑–∞—Ç–∞...');
    
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
    const supabase = createClient(supabaseUrl, supabaseKey);

    const { data: adminProfile, error: fetchError } = await supabase
      .from('admin_profile')
      .select('*')
      .eq('email', testEmail)
      .single();

    if (fetchError) {
      console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ admin –ø—Ä–æ—Ñ–∏–ª:', fetchError.message);
      return;
    }

    if (!adminProfile) {
      console.error('‚ùå –ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω admin –ø—Ä–æ—Ñ–∏–ª —Å —Ç–æ–∑–∏ email');
      return;
    }

    console.log('‚úÖ Admin –ø—Ä–æ—Ñ–∏–ª –Ω–∞–º–µ—Ä–µ–Ω:');
    console.log('   ID:', adminProfile.id);
    console.log('   Name:', adminProfile.name);
    console.log('   Email:', adminProfile.email);
    console.log('   Hashed Password:', adminProfile.password.substring(0, 20) + '...');
    console.log('');

    // 2. –•–∞—à–∏—Ä–∞–º–µ —Ç–µ—Å—Ç–æ–≤–∞—Ç–∞ –ø–∞—Ä–æ–ª–∞ –∏ —è —Å—Ä–∞–≤–Ω—è–≤–∞–º–µ
    console.log('üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞—Ç–∞...');
    
    const isPasswordValid = await bcrypt.compare(testPassword, adminProfile.password);
    
    if (!isPasswordValid) {
      console.log('‚ùå –ü–∞—Ä–æ–ª–∞—Ç–∞ –Ω–µ —Å—ä–≤–ø–∞–¥–∞ —Å—ä—Å —Å—ä—Ö—Ä–∞–Ω–µ–Ω–∞—Ç–∞ hash —Å—Ç–æ–π–Ω–æ—Å—Ç');
      console.log('üí° –°—ä–∑–¥–∞–≤–∞–º –Ω–æ–≤–∞ hash —Å—Ç–æ–π–Ω–æ—Å—Ç –∑–∞ —Ç–µ—Å—Ç–æ–≤–∞—Ç–∞ –ø–∞—Ä–æ–ª–∞...');
      
      const newHashedPassword = await bcrypt.hash(testPassword, 10);
      console.log('   –ù–æ–≤–∞ hash —Å—Ç–æ–π–Ω–æ—Å—Ç:', newHashedPassword);
      
      // –û–±–Ω–æ–≤—è–≤–∞–º–µ –ø–∞—Ä–æ–ª–∞—Ç–∞ –≤ –±–∞–∑–∞—Ç–∞
      const { error: updateError } = await supabase
        .from('admin_profile')
        .update({ password: newHashedPassword })
        .eq('email', testEmail);

      if (updateError) {
        console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –ø–∞—Ä–æ–ª–∞—Ç–∞:', updateError.message);
        return;
      }

      console.log('‚úÖ –ü–∞—Ä–æ–ª–∞—Ç–∞ –µ –æ–±–Ω–æ–≤–µ–Ω–∞ –≤ –±–∞–∑–∞—Ç–∞');
      console.log('');
    } else {
      console.log('‚úÖ –ü–∞—Ä–æ–ª–∞—Ç–∞ –µ –≤–∞–ª–∏–¥–Ω–∞!');
      console.log('');
    }

    // 3. –¢–µ—Å—Ç–≤–∞–º–µ login API endpoint
    console.log('üåê –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ Login API endpoint...');
    
    const loginResponse = await fetch('http://localhost:3000/api/admin/auth', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: testEmail,
        password: testPassword
      })
    });

    const loginData = await loginResponse.json();

    if (!loginResponse.ok) {
      console.error('‚ùå Login API –≥—Ä–µ—à–∫–∞:', loginData.error || 'Unknown error');
      console.error('   Status:', loginResponse.status);
      return;
    }

    console.log('‚úÖ Login API —É—Å–ø–µ—à–µ–Ω!');
    console.log('   Success:', loginData.success);
    console.log('   Admin ID:', loginData.admin?.id);
    console.log('   Admin Name:', loginData.admin?.name);
    console.log('   Admin Email:', loginData.admin?.email);
    console.log('');

    // 4. –¢–µ—Å—Ç–≤–∞–º–µ profile API endpoint
    console.log('üë§ –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ Profile API endpoint...');
    
    const profileResponse = await fetch('http://localhost:3000/api/admin/profile');
    const profileData = await profileResponse.json();

    if (!profileResponse.ok) {
      console.error('‚ùå Profile API –≥—Ä–µ—à–∫–∞:', profileData.error || 'Unknown error');
      return;
    }

    console.log('‚úÖ Profile API —É—Å–ø–µ—à–µ–Ω!');
    console.log('   Name:', profileData.name);
    console.log('   Email:', profileData.email);
    console.log('   Company:', profileData.company_name);
    console.log('');

    console.log('üéâ –í—Å–∏—á–∫–∏ —Ç–µ—Å—Ç–æ–≤–µ —Å–∞ —É—Å–ø–µ—à–Ω–∏! Admin –ø–∞–Ω–µ–ª—ä—Ç –µ –≥–æ—Ç–æ–≤ –∑–∞ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ.');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –≥—Ä–µ—à–∫–∞:', error.message);
  }
}

// –ó–∞—Ä–µ–∂–¥–∞–º–µ environment variables
require('dotenv').config({ path: '.env.local' });

// –°—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ —Ç–µ—Å—Ç–∞
testAdminLogin(); 