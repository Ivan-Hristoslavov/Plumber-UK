const { createClient } = require('@supabase/supabase-js');
const fs = require('fs').promises;
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞ –Ω–æ–≤–∞—Ç–∞ –±–∞–∑–∞
const SUPABASE_URL = 'https://riwmzezepflpnemylnyr.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJpd216ZXplcGZscG5lbXlsbnlyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE2NjA0NDQsImV4cCI6MjA2NzIzNjQ0NH0.oWmpFAKAPT5QjVrpCZw0-kgZUtFBNVdM8GqoEtsv-qU';

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function executeSQLFile() {
  console.log('üöÄ –ü—É—à–≤–∞–Ω–µ –Ω–∞ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏ –≤ Supabase...\n');
  console.log(`üìç URL: ${SUPABASE_URL}`);
  console.log(`üìã Schema: public`);
  console.log('');
  
  try {
    // –ß–µ—Ç–µ–º SQL —Ñ–∞–π–ª–∞
    const sqlFilePath = path.join(__dirname, '..', 'complete-schema.sql');
    console.log('üìñ –ß–µ—Ç–µ–Ω–µ –Ω–∞ SQL —Ñ–∞–π–ª–∞...');
    const sqlContent = await fs.readFile(sqlFilePath, 'utf8');
    console.log(`‚úÖ SQL —Ñ–∞–π–ª—ä—Ç –µ –ø—Ä–æ—á–µ—Ç–µ–Ω (${sqlContent.length} —Å–∏–º–≤–æ–ª–∞)`);
    
    // –†–∞–∑–¥–µ–ª—è–º–µ SQL –Ω–∞ –æ—Ç–¥–µ–ª–Ω–∏ –∑–∞—è–≤–∫–∏
    console.log('üîß –†–∞–∑–¥–µ–ª—è–Ω–µ –Ω–∞ SQL –∑–∞—è–≤–∫–∏...');
    const statements = sqlContent
      .split(';')
      .map(stmt => stmt.trim())
      .filter(stmt => stmt.length > 0 && !stmt.startsWith('--') && stmt !== 'SELECT \'Database schema created successfully! All tables, functions, triggers, and sample data have been set up.\' as result');
    
    console.log(`üìù –ù–∞–º–µ—Ä–µ–Ω–∏ ${statements.length} SQL –∑–∞—è–≤–∫–∏ –∑–∞ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ\n`);
    
    let successCount = 0;
    let errorCount = 0;
    
    // –ò–∑–ø—ä–ª–Ω—è–≤–∞–º–µ –∑–∞—è–≤–∫–∏—Ç–µ –µ–¥–Ω–∞ –ø–æ –µ–¥–Ω–∞
    for (let i = 0; i < statements.length; i++) {
      const statement = statements[i];
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–º–µ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏ –∏ –ø—Ä–∞–∑–Ω–∏ —Ä–µ–¥–æ–≤–µ
      if (statement.startsWith('--') || statement.trim() === '') {
        continue;
      }
      
      console.log(`üìù –ò–∑–ø—ä–ª–Ω—è–≤–∞–Ω–µ –Ω–∞ –∑–∞—è–≤–∫–∞ ${i + 1}/${statements.length}...`);
      
      // –ü–æ–∫–∞–∑–≤–∞–º–µ –ø—ä—Ä–≤–∏—Ç–µ 50 —Å–∏–º–≤–æ–ª–∞ –æ—Ç –∑–∞—è–≤–∫–∞—Ç–∞ –∑–∞ debug
      const preview = statement.substring(0, 50).replace(/\s+/g, ' ');
      console.log(`   ${preview}${statement.length > 50 ? '...' : ''}`);
      
      try {
        // –û–ø–∏—Ç–≤–∞–º–µ —Å–µ –¥–∞ –∏–∑–ø—ä–ª–Ω–∏–º –∑–∞—è–≤–∫–∞—Ç–∞ —á—Ä–µ–∑ PostgREST
        const response = await fetch(`${SUPABASE_URL}/rest/v1/rpc/exec_sql`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
            'apikey': SUPABASE_ANON_KEY
          },
          body: JSON.stringify({ sql_query: statement })
        });
        
        if (response.ok) {
          console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ`);
          successCount++;
        } else {
          const errorText = await response.text();
          console.log(`   ‚ùå –ì—Ä–µ—à–∫–∞: ${errorText}`);
          errorCount++;
          
          // –ê–∫–æ –≥—Ä–µ—à–∫–∞—Ç–∞ –µ –∑–∞ –ª–∏–ø—Å–≤–∞—â–∞ —Ñ—É–Ω–∫—Ü–∏—è, –æ–ø–∏—Ç–≤–∞–º–µ —Å–µ —Å –¥—Ä—É–≥ –ø–æ–¥—Ö–æ–¥
          if (errorText.includes('exec_sql')) {
            console.log('   üîÑ –û–ø–∏—Ç–≤–∞–º–µ –∞–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–µ–Ω –ø–æ–¥—Ö–æ–¥...');
            
            // –û–ø–∏—Ç–≤–∞–º–µ —Å–µ –¥–∞ –∏–∑–ø—ä–ª–Ω–∏–º –∑–∞—è–≤–∫–∞—Ç–∞ –¥–∏—Ä–µ–∫—Ç–Ω–æ —á—Ä–µ–∑ Supabase –∫–ª–∏–µ–Ω—Ç–∞
            try {
              if (statement.toUpperCase().includes('CREATE TABLE')) {
                console.log('   ‚ö†Ô∏è  CREATE TABLE –∑–∞—è–≤–∫–∞ - —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–µ –∏–∑–ø—ä–ª–Ω–∏ –≤ SQL Editor');
              } else if (statement.toUpperCase().includes('INSERT')) {
                console.log('   ‚ö†Ô∏è  INSERT –∑–∞—è–≤–∫–∞ - —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–µ –∏–∑–ø—ä–ª–Ω–∏ –≤ SQL Editor');
              }
            } catch (altError) {
              console.log(`   ‚ùå –ê–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏—è—Ç –ø–æ–¥—Ö–æ–¥ —Å—ä—â–æ –Ω–µ —Ä–∞–±–æ—Ç–∏: ${altError.message}`);
            }
          }
        }
      } catch (error) {
        console.log(`   ‚ùå –ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞: ${error.message}`);
        errorCount++;
      }
      
      // –ú–∞–ª–∫–∞ –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞—è–≤–∫–∏—Ç–µ
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    console.log('\n' + '='.repeat(50));
    console.log('üìä –û–ë–û–ë–©–ï–ù–ò–ï –ù–ê –ò–ó–ü–™–õ–ù–ï–ù–ò–ï–¢–û');
    console.log('='.repeat(50));
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–∏ –∑–∞—è–≤–∫–∏: ${successCount}`);
    console.log(`‚ùå –ù–µ—É—Å–ø–µ—à–Ω–∏ –∑–∞—è–≤–∫–∏: ${errorCount}`);
    console.log(`üìã –û–±—â–æ –∑–∞—è–≤–∫–∏: ${statements.length}`);
    
    if (errorCount > 0) {
      console.log('\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –ò–º–∞ –≥—Ä–µ—à–∫–∏ –ø—Ä–∏ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ—Ç–æ!');
      console.log('üîß –†–ï–®–ï–ù–ò–ï:');
      console.log('1. –û—Ç–∏–¥–µ—Ç–µ –≤ Supabase Dashboard');
      console.log('2. –ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞ riwmzezepflpnemylnyr');
      console.log('3. –û—Ç–∏–¥–µ—Ç–µ –≤ SQL Editor');
      console.log('4. –ö–æ–ø–∏—Ä–∞–π—Ç–µ –∏ –∏–∑–ø—ä–ª–Ω–µ—Ç–µ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ –Ω–∞ complete-schema.sql');
      console.log('5. –ö–ª–∏–∫–Ω–µ—Ç–µ "Run" –∑–∞ –¥–∞ –∏–∑–ø—ä–ª–Ω–∏—Ç–µ –≤—Å–∏—á–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞–≤–µ–¥–Ω—ä–∂');
    } else {
      console.log('\nüéâ –í—Å–∏—á–∫–∏ –∑–∞—è–≤–∫–∏ —Å–∞ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ!');
      console.log('üìã –ë–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏ –µ –≥–æ—Ç–æ–≤–∞ –∑–∞ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ.');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –≥—Ä–µ—à–∫–∞:', error);
  }
}

// –ò–∑–ø—ä–ª–Ω–µ–Ω–∏–µ
executeSQLFile().catch(console.error); 