const { createClient } = require('@supabase/supabase-js');

async function testFixedIssues() {
  console.log('üîß –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –∫–æ—Ä–∏–≥–∏—Ä–∞–Ω–∏ –ø—Ä–æ–±–ª–µ–º–∏...\n');

  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
  const supabase = createClient(supabaseUrl, supabaseKey);

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ admin_profile —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ç–∞
    console.log('üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ admin_profile —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ç–∞...');
    const { data: adminProfile, error: profileError } = await supabase
      .from('admin_profile')
      .select('*')
      .single();

    if (profileError) {
      console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ admin_profile:', profileError.message);
    } else {
      console.log('‚úÖ Admin Profile –∫–æ–ª–æ–Ω–∏:');
      const expectedColumns = ['certifications', 'years_of_experience', 'specializations', 'response_time', 'service_areas', 'terms_and_conditions', 'privacy_policy'];
      expectedColumns.forEach(col => {
        if (adminProfile.hasOwnProperty(col)) {
          console.log(`   ‚úÖ ${col}: ${adminProfile[col] ? '–∏–º–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç' : 'null'}`);
        } else {
          console.log(`   ‚ùå ${col}: –ª–∏–ø—Å–≤–∞`);
        }
      });
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ gallery —Ç–∞–±–ª–∏—Ü–∏—Ç–µ –∑–∞ admin_id
    console.log('\nüñºÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ gallery —Ç–∞–±–ª–∏—Ü–∏—Ç–µ...');
    
    const { data: gallerySections, error: sectionsError } = await supabase
      .from('gallery_sections')
      .select('*')
      .limit(1);

    if (sectionsError) {
      console.error('‚ùå Gallery sections –≥—Ä–µ—à–∫–∞:', sectionsError.message);
    } else {
      const hasAdminId = gallerySections.length > 0 && gallerySections[0].hasOwnProperty('admin_id');
      console.log(`   Gallery sections admin_id: ${hasAdminId ? '‚úÖ' : '‚ùå'}`);
    }

    const { data: gallery, error: galleryError } = await supabase
      .from('gallery')
      .select('*')
      .limit(1);

    if (galleryError) {
      console.error('‚ùå Gallery –≥—Ä–µ—à–∫–∞:', galleryError.message);
    } else {
      const hasAdminId = gallery.length > 0 ? gallery[0].hasOwnProperty('admin_id') : true; // OK if empty
      console.log(`   Gallery admin_id: ${hasAdminId ? '‚úÖ' : '‚ùå'}`);
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ admin_settings –∑–∞–ø–∏—Å–∏
    console.log('\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ admin_settings...');
    const { data: settings, error: settingsError } = await supabase
      .from('admin_settings')
      .select('*');

    if (settingsError) {
      console.error('‚ùå Settings –≥—Ä–µ—à–∫–∞:', settingsError.message);
    } else {
      console.log(`‚úÖ –ë—Ä–æ–π settings –∑–∞–ø–∏—Å–∏: ${settings.length}`);
      
      const importantSettings = ['businessPhone', 'vatSettings', 'dayOffSettings', 'businessHours'];
      importantSettings.forEach(key => {
        const setting = settings.find(s => s.key === key);
        console.log(`   ${key}: ${setting ? '‚úÖ' : '‚ùå'}`);
      });
    }

    // 4. –¢–µ—Å—Ç–≤–∞–º–µ API endpoints
    console.log('\nüåê –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ API endpoints...');

    // Test Profile API
    try {
      const profileResponse = await fetch('http://localhost:3000/api/admin/profile');
      if (profileResponse.ok) {
        console.log('   ‚úÖ GET Profile API');
      } else {
        console.log('   ‚ùå GET Profile API');
      }
    } catch (err) {
      console.log('   ‚ùå GET Profile API - network error');
    }

    // Test Settings API
    try {
      const settingsResponse = await fetch('http://localhost:3000/api/admin/settings');
      if (settingsResponse.ok) {
        console.log('   ‚úÖ GET Settings API');
      } else {
        console.log('   ‚ùå GET Settings API');
      }
    } catch (err) {
      console.log('   ‚ùå GET Settings API - network error');
    }

    // Test Gallery API
    try {
      const galleryResponse = await fetch('http://localhost:3000/api/gallery');
      if (galleryResponse.ok) {
        console.log('   ‚úÖ GET Gallery API');
      } else {
        console.log('   ‚ùå GET Gallery API');
      }
    } catch (err) {
      console.log('   ‚ùå GET Gallery API - network error');
    }

    // Test Gallery Sections API
    try {
      const gallerySectionsResponse = await fetch('http://localhost:3000/api/gallery-sections');
      if (gallerySectionsResponse.ok) {
        console.log('   ‚úÖ GET Gallery Sections API');
      } else {
        console.log('   ‚ùå GET Gallery Sections API');
      }
    } catch (err) {
      console.log('   ‚ùå GET Gallery Sections API - network error');
    }

    // Test Areas API
    try {
      const areasResponse = await fetch('http://localhost:3000/api/admin/areas');
      if (areasResponse.ok) {
        console.log('   ‚úÖ GET Areas API');
      } else {
        console.log('   ‚ùå GET Areas API');
      }
    } catch (err) {
      console.log('   ‚ùå GET Areas API - network error');
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ VAT –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    console.log('\nüí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ VAT –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');
    const vatSetting = settings?.find(s => s.key === 'vatSettings');
    if (vatSetting) {
      const vatData = typeof vatSetting.value === 'string' ? JSON.parse(vatSetting.value) : vatSetting.value;
      console.log(`   VAT Enabled: ${vatData.enabled ? '‚úÖ' : '‚ùå (disabled)'}`);
      console.log(`   VAT Rate: ${vatData.rate}%`);
      console.log(`   VAT Company: ${vatData.companyName || 'N/A'}`);
    } else {
      console.log('   ‚ùå VAT settings –ª–∏–ø—Å–≤–∞—Ç');
    }

    // 6. –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ Day Off –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    console.log('\nüìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Day Off –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');
    const dayOffSetting = settings?.find(s => s.key === 'dayOffSettings');
    if (dayOffSetting) {
      const dayOffData = typeof dayOffSetting.value === 'string' ? JSON.parse(dayOffSetting.value) : dayOffSetting.value;
      console.log(`   Day Off Enabled: ${dayOffData.enabled ? '‚úÖ' : '‚ùå (disabled)'}`);
      console.log(`   Day Off Message: ${dayOffData.message || 'N/A'}`);
    } else {
      console.log('   ‚ùå Day Off settings –ª–∏–ø—Å–≤–∞—Ç');
    }

    console.log('\nüéâ –¢–µ—Å—Ç–≤–∞–Ω–µ—Ç–æ –∑–∞–≤—ä—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –≥—Ä–µ—à–∫–∞:', error.message);
  }
}

// –ó–∞—Ä–µ–∂–¥–∞–º–µ environment variables
require('dotenv').config({ path: '.env.local' });

// –°—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ —Ç–µ—Å—Ç–∞
testFixedIssues(); 